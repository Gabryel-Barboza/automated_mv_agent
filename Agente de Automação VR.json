{
  "name": "Agente de Automação VR",
  "nodes": [
    {
      "parameters": {
        "content": "# Validar dados\n\n* Esse segmento é responsável por:\n  * Separar cabeçalho do CSV.\n  * Dividir os dados em vários itens do n8n.\n  * Iterar sobre os itens",
        "height": 288,
        "width": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1056,
        -48
      ],
      "id": "21d3612a-1bc1-41f7-933e-8face52156a3",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "url": "http:fastapi:8000/api/upload",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        336
      ],
      "id": "5448a683-05e3-4517-9f5e-efb25fcf627f",
      "name": "Requisitar Dados"
    },
    {
      "parameters": {
        "content": "",
        "height": 240,
        "width": 784,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -96,
        288
      ],
      "id": "e3618bcb-63b1-4eb2-985b-3553048d6022",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "",
        "height": 384,
        "width": 1008,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        768,
        512
      ],
      "id": "96866368-1490-42f4-95b6-68cd6c143a87",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "const [headers, ...data] = $input.first().json.data.split('\\n')\n\nreturn [{ headers }, { data }]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        336
      ],
      "id": "731a6e39-02c9-4f00-89e9-77740d66575d",
      "name": "Extrair Cabeçalhos"
    },
    {
      "parameters": {
        "jsCode": "const dataList = $input.all()[1].json.data\n\nconst output = []\ndataList.forEach((el) => output.push({ data: el }))\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        336
      ],
      "id": "e10fe530-1be0-4587-982e-2011206e54fd",
      "name": "Dividir Dados"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=CABEÇALHOS DO CSV: {{ $('Extrair Cabeçalhos').first().json.headers }}\nDADOS DO CSV: {{ $json.data }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a highly competent data analyst. Your task is to clean and validate HR data from a provided CSV string, adhering strictly to the rules below. Do not invent or assume any information not present in the original data. All corrections must be based exclusively on logical patterns, internal data consistency, and the explicit rules provided. If a correction is not possible, mark the field as \"N/A\".\n\n**Input:** The full content of a CSV file as a text string.\n\n**Instructions**:\n1.  **Exclusion**:\n    * Remove all rows for directors, interns, apprentices, employees on leave (e.g., \"Afastamento\" column), and professionals working abroad (e.g., \"País\" or \"Localização\" shows \"Exterior\", \"International\", or non-Brazilian country codes). Use the unique employee ID (e.g., \"Matrícula\") for row identification.\n    * Exclude invalid, duplicate, or unnamed columns.\n    * Exclude all duplicates with different unions (error in join)\n\n2.  **Data Validation and Correction**:\n    * **Dates**: Standardize all date formats to **YYYY-MM-DD**. Correct inconsistent or logically impossible dates based on a pattern from nearby data (e.g., \"32/01/2023\" becomes \"31/01/2023\").\n    * **Missing Fields**: Fill empty fields only if the value can be directly deduced from other data (e.g., calculate \"Idade\" from \"Data de Nascimento\"). Otherwise, set to \"N/A\".\n    * **Vacation**: Check for impossible vacation durations or overlaps. Adjust only if the data provides a clear basis.\n    * **Holidays**: Do not correct or fill holiday dates unless the data explicitly provides location and a common holiday can be logically inferred (e.g., holiday in São Paulo).\n    * **Column Names**: Standardize column names to be objective and clear (e.g., \"Compra\" -> \"PRODUTOS_COMPRADOS\").\n    * **Meal Allowance (VR)**: Use the reference table below to fill in missing VR values based on the employee's state or union.\n        * São Paulo: R$37,50\n        * Paraná: R$35,00\n        * Rio de Janeiro: R$35,00\n        * Rio Grande do Sul: R$35,00\n\n**Final Output**:\n* Provide the processed data as a single CSV string, using semicolons as delimiters and including headers. No additional text, explanations, or code should be included."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        896,
        576
      ],
      "id": "f8e0a6be-e738-4d75-9aaf-949d46561685",
      "name": "Tratar e Validar Dados",
      "executeOnce": true,
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=DADOS DO CSV: {{ $json.output }}",
        "options": {
          "systemMessage": "You are a specialized agent in financial calculations and data processing. Your task is to calculate the Meal Voucher (VR) amount for each employee, based on a CSV-formatted text string. Follow the business rules precisely and return the result as a CSV string. Do not invent or assume any information; all calculations must be based exclusively on the provided data. The payment month is May 2025.\n\n**Input**: The full content of a CSV file as a text string.\n\n**Business Rules**:\n* **VR Amount by Union**: Use the following daily VR values, completing nulls with them based on the union/state:\n    * São Paulo: R$37,50\n    * Paraná: R$35,00\n    * Rio de Janeiro: R$35,00\n    * Rio Grande do Sul: R$35,00\n* **Business Days Calculation**:\n    * Calculate the exact number of business days for each employee in May 2025.\n    * Exclude vacation periods and adjust for mid-month hiring/termination dates.\n    * Consider state and municipal holidays.\n* **Termination Rules**:\n    * If an employee was terminated on or before the 15th of the month, do not consider them for VR payment.\n    * If terminated after the 15th, calculate VR proportionally to the business days worked until the termination date.\n* **Cost Proportion**: The company pays 80% of the total VR, and 20% is deducted from the employee.\n* Use the format YYYY/MM/DD for dates and the european decimal delimiter \",\".\n* Use the column \"OBSERVACAO\" to comment if you find something unusual or about employees with less days, keep it short.\n\n**Output**:\nGenerate a semicolon-delimited CSV string with the following headers for each eligible employee:\n`MATRICULA;DATA DE ADMISSAO;SINDICATO;COMPETENCIA;DIAS UTEIS TRABALHADOS;VR DIARIO - R$;VALOR TOTAL - R$;CUSTO EMPRESA - R$;DESCONTO PROFISSIONAL - R$;OBSERVACAO`\n\nEnsure the output contains only the CSV data; do not include any other text, code or explanations. If no data is provided, return an empty string.\n\n**Output Example**\n\n---\nMATRICULA;DATA DE ADMISSAO;SINDICATO;COMPETENCIA;DIAS UTEIS TRABALHADOS;VR DIARIO - R$;VALOR TOTAL - R$;CUSTO EMPRESA - R$;DESCONTO PROFISSIONAL - R$;OBSERVACAO\n34941;N/A;SINDPD SP - SIND.TRAB.EM PROC DADOS E EMPR.EMPRESAS PROC DADOS ESTADO DE SP.;05/2025;14;37,50;825,00;660,00;165,00;LICENCA MATERNIDADE\n---"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1200,
        576
      ],
      "id": "baab715c-f5a7-4366-a667-fbd78c131a72",
      "name": "Calcular VR",
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f6a0b45-a424-46c1-afdd-6ab5aed112a3",
              "name": "dataList",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        800,
        336
      ],
      "id": "ffd98df9-ac9e-46a4-8934-ce520ec93513",
      "name": "Mapear Dados"
    },
    {
      "parameters": {
        "batchSize": 200,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        992,
        336
      ],
      "id": "58de5e8a-2c28-418f-8c00-55513f80d5a6",
      "name": "Iterar em Lotes"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {
          "headerRow": true,
          "sheetName": "VR_MENSAL"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1456,
        320
      ],
      "id": "30834ad0-fe5d-491f-a029-cea62a80904a",
      "name": "Criar Planilha"
    },
    {
      "parameters": {
        "content": "# Entrada de Dados\nEsse segmento é responsável por baixar o arquivo zipado com as planilhas, descompactar e consolidar em uma única base, através do backend em Python.",
        "height": 272,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        96,
        -32
      ],
      "id": "fed4ff2c-980e-4d39-a2a4-39b06df093a4",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.all().map((data) => data.json.dataList).join('\\n')\n\nreturn { data }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        352
      ],
      "id": "273841f3-7639-4215-9f58-e7e33ffcda4b",
      "name": "Juntar Única String"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1856,
        320
      ],
      "id": "d4d8ba78-d377-421a-bb11-74d4b5944a37",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "responseDataSource": "set",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        432,
        704
      ],
      "id": "ed1a5139-d97a-490f-9068-ad21e6fa04c3",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "output.xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1648,
        320
      ],
      "id": "3955974b-4325-4149-a713-babc411ed2ae",
      "name": "Escrever Planilha Resultante"
    },
    {
      "parameters": {
        "fileSelector": "output.xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        224,
        704
      ],
      "id": "c6eb7074-1022-4221-982b-733b1a4945b1",
      "name": "Ler Planilha Resultante"
    },
    {
      "parameters": {
        "path": "activate/status",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        16,
        704
      ],
      "id": "4e3a9703-5036-4fe4-a73d-2edfb1fa5bf6",
      "name": "Webhook File",
      "webhookId": "7581be77-a1de-4efe-bb00-d0837478561d"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "activate",
        "options": {
          "noResponseBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -64,
        336
      ],
      "id": "f7bba612-9c96-49f9-8072-80fe22e4b0e3",
      "name": "Webhook Activate",
      "webhookId": "7581be77-a1de-4efe-bb00-d0837478561d"
    },
    {
      "parameters": {
        "content": "# Agentes\n\n* Esse segmento é responsável por enviar os itens para os agentes\n* Cada agente irá tratar os dados conforme o que foi descrito no prompt.\n* Técnicas de engenharia de prompt foram aplicadas para restringir o agente a realizar a tarefa corretamente.\n* Após o cálculo final de VR, os dados são parseados para o formato JSON e retornados ao segmento de criação da planilha.",
        "height": 320,
        "width": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1824,
        576
      ],
      "id": "2f51c454-1aa0-44fc-bc77-d646bdc8d1fa",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "",
        "height": 208,
        "width": 1008,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        768,
        288
      ],
      "id": "d4488092-ea8e-4075-92ff-70d687499318",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "",
        "height": 240,
        "width": 784,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -96,
        656
      ],
      "id": "ebaa705e-eb33-4f17-a20f-5bac9c4a499e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Saída\n\n* A saída de dados recebe uma requisição por webhook para ler o arquivo resultante e retorná-lo ao usuário.",
        "height": 288,
        "width": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -576,
        640
      ],
      "id": "9e9aabca-cb74-4fe7-adea-76d5fb673ae9",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\nimport io\n\ntry:\n  # Tratando e convertendo os dados para um formato compatível\n  input_data = _input.first().json['output']\n  data = input_data.replace('`', '').replace('csv', '').rstrip(';')\n  parsed_data = io.StringIO(data)\n\n  # Lendo o objeto, tratando com pandas e convertendo para um dicionário\n  df = pd.read_csv(\n    parsed_data, \n    sep=';', \n    decimal=',', \n    encoding='utf-8', \n    dtype={\n      'MATRICULA': str,\n      'DATA DE ADMISSAO': str,\n      'VR DIARIO - R$': float, \n      'VALOR TOTAL - R$': float, \n      'CUSTO EMPRESA - R$': float,\n      'DESCONTO PROFISSIONAL - R$': float\n    },\n  )\n\n  df['DATA DE ADMISSAO'] = pd.to_datetime(\n                            df['DATA DE ADMISSAO'], \n                            errors='coerce'\n                          ).dt.strftime('%Y/%m/%d')\n  df['DATA DE ADMISSAO'] = df['DATA DE ADMISSAO'].fillna('')\n  df['OBSERVACAO'] = df['OBSERVACAO'].fillna('')\n  \n  # Adicione colunas aqui para serem excluídas da base final\n  drop_list = []\n  df.drop([col for col in drop_list if col in df.columns], axis=1, inplace=True)\n  \n  # Records para exportar no padrão JSON\n  data = df.to_dict(orient=\"records\")\n\nexcept Exception as e:\n  print(f'Error: \\n{e}')\n  data = {}\nfinally:\n  return data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        576
      ],
      "id": "38a59298-fe89-4ed6-8772-754fc55e140d",
      "name": "JSON Parser",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        896,
        784
      ],
      "id": "ce579236-f6b2-4987-bcca-00c3aab2be0d",
      "name": "Gemini 2.5 Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "0TgrYJM7ORUaNjlJ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1200,
        784
      ],
      "id": "8eea38bc-3333-4cfd-bcf0-eadd24ebaa6b",
      "name": "Gemini 2.5 Pro 2",
      "credentials": {
        "googlePalmApi": {
          "id": "0TgrYJM7ORUaNjlJ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Requisitar Dados": {
      "main": [
        [
          {
            "node": "Extrair Cabeçalhos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extrair Cabeçalhos": {
      "main": [
        [
          {
            "node": "Dividir Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dividir Dados": {
      "main": [
        [
          {
            "node": "Mapear Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tratar e Validar Dados": {
      "main": [
        [
          {
            "node": "Calcular VR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular VR": {
      "main": [
        [
          {
            "node": "JSON Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapear Dados": {
      "main": [
        [
          {
            "node": "Iterar em Lotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Iterar em Lotes": {
      "main": [
        [
          {
            "node": "Criar Planilha",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Juntar Única String",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Criar Planilha": {
      "main": [
        [
          {
            "node": "Escrever Planilha Resultante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Juntar Única String": {
      "main": [
        [
          {
            "node": "Tratar e Validar Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escrever Planilha Resultante": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ler Planilha Resultante": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook File": {
      "main": [
        [
          {
            "node": "Ler Planilha Resultante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Activate": {
      "main": [
        [
          {
            "node": "Requisitar Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Parser": {
      "main": [
        [
          {
            "node": "Iterar em Lotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 2.5 Pro": {
      "ai_languageModel": [
        [
          {
            "node": "Tratar e Validar Dados",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 2.5 Pro 2": {
      "ai_languageModel": [
        [
          {
            "node": "Calcular VR",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": -1
  },
  "versionId": "8b93eb1a-48e5-44f2-8cf4-1d7df8dfbd88",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "231b4fcf052db07b90cec772d2e46c08568f8721ea038399e11d196703eb0290"
  },
  "id": "sBkLBjwwjaE8vj8T",
  "tags": []
}