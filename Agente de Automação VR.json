{
  "name": "Agente de Automação VR",
  "nodes": [
    {
      "parameters": {
        "content": "# Validar dados\n\n* Esse segmento é responsável por:\n  * Separar cabeçalho do CSV.\n  * Dividir os dados em vários itens do n8n.\n  * Iterar sobre os itens",
        "height": 288,
        "width": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1056,
        -48
      ],
      "id": "21d3612a-1bc1-41f7-933e-8face52156a3",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "url": "http:fastapi:8000/api/upload",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        336
      ],
      "id": "5448a683-05e3-4517-9f5e-efb25fcf627f",
      "name": "Requisitar Dados"
    },
    {
      "parameters": {
        "content": "",
        "height": 240,
        "width": 784,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -96,
        288
      ],
      "id": "e3618bcb-63b1-4eb2-985b-3553048d6022",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "",
        "height": 384,
        "width": 1008,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        768,
        512
      ],
      "id": "96866368-1490-42f4-95b6-68cd6c143a87",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "const [headers, ...data] = $input.first().json.data.split('\\n')\n\nreturn [{ headers }, { data }]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        336
      ],
      "id": "731a6e39-02c9-4f00-89e9-77740d66575d",
      "name": "Extrair Cabeçalhos"
    },
    {
      "parameters": {
        "jsCode": "const dataList = $input.all()[1].json.data\nconsole.log(dataList)\n\nconst output = []\ndataList.forEach((el) => output.push({ data: el }))\nconsole.log(output)\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        336
      ],
      "id": "e10fe530-1be0-4587-982e-2011206e54fd",
      "name": "Dividir Dados"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\nCABEÇALHOS DO CSV: {{ $('Extrair Cabeçalhos').first().json.headers }}\nDADOS DO CSV: {{ $json.data }}",
        "options": {
          "systemMessage": "Você é um analista de dados altamente competente e preciso, especializado em limpeza e validação de dados de recursos humanos em planilhas CSV. Sua tarefa é analisar estritamente os dados fornecidos no arquivo CSV, sem inventar, adicionar ou assumir qualquer informação que não esteja presente nos dados originais. Todas as correções e tratamentos devem ser baseados exclusivamente em padrões lógicos, consistências internas dos dados e regras explícitas fornecidas abaixo. Se uma correção não puder ser feita com base nos dados existentes (por exemplo, se um campo faltante não tiver contexto para inferência direta de outras colunas), marque-o como \"N/A\".\n\n**Entrada de Dados**: Você receberá o conteúdo completo do arquivo CSV como uma string de texto. Parseie-o corretamente como uma estrutura tabular equivalente para processamento.\n\n**Tratamentos a Realizar**:\n1. **Tratamento de Exclusões**:\n   - Remova da base final todos os profissionais com cargos que indiquem diretores (ex.: \"Diretor\", \"Diretora\", ou variações como \"Diretor Executivo\"), estagiários (ex.: \"Estagiário\", \"Estagiária\"), aprendizes (ex.: \"Aprendiz\", \"Jovem Aprendiz\"), afastados em geral (ex.: licença maternidade, licença saúde, ou qualquer status de afastamento indicado em colunas como \"Status\" ou \"Afastamento\"), e profissionais que atuam no exterior (ex.: identificados por colunas como \"País\", \"Localização\" ou \"Exterior\" com valores como \"Exterior\", \"Internacional\", ou códigos de países fora do Brasil).\n   - Guie-se pela matrícula (assuma que há uma coluna como \"Matrícula\" ou \"ID\" única por profissional) para identificar e excluir linhas inteiras. Não exclua linhas se a identificação não for clara com base nos dados; em vez disso, mantenha e anote como \"N/A\".\n   - Exclua colunas ou linhas adicionais da base final se esta:\n     - ser uma coluna inválida, que não existam dados.\n     - ser uma coluna duplicata dos dados.\n     - ser uma coluna sem nome e sem sentido.\n  - O tratamento deve ser feito para todos os registros. Não pule registros sem verificar as condições estabelecidas.\n\n2. **Validação e Correção**:\n   - **Datas inconsistentes ou \"quebradas\"**: Verifique colunas de datas (ex.: \"Data de Admissão\", \"Data de Nascimento\", \"Data de Término\"). Corrija formatos inconsistentes (ex.: converter \"DD/MM/YYYY\" para \"YYYY-MM-DD\" se padrão, ou corrigir datas inválidas como \"32/01/2023\" para a data mais lógica baseada em contexto próximo, como \"31/01/2023\" se houver evidência em outras linhas).\n   - **Campos faltantes**: Para campos vazios, preencha apenas se houver lógica direta dos dados (ex.: se uma coluna \"Idade\" estiver vazia, calcule-a a partir de \"Data de Nascimento\" e data atual se disponível; caso contrário, deixe como \"N/A\").\n   - **Férias mal preenchidas**: Verifique colunas relacionadas a férias (ex.: \"Período de Férias\", \"Dias de Férias\"). Corrija se houver sobreposições ou durações impossíveis (ex.: férias de mais de 30 dias sem justificativa nos dados), ajustando para valores padrão brasileiros (30 dias) apenas se o contexto dos dados permitir (ex.: baseado em tempo de serviço calculável de outras colunas). Não assuma valores sem base.\n   - **Feriados estaduais e municipais aplicados corretamente**: Identifique colunas de ausências ou calendários. Aplique feriados brasileiros padrão (ex.: federais como Carnaval, Natal) e ajuste para estaduais/municipais apenas se o local (ex.: estado/cidade) estiver explicitamente nos dados e você puder inferir logicamente sem pesquisa externa. Use apenas conhecimento geral de feriados públicos brasileiros (ex.: feriado em SP como 09/07); não invente datas ou locais. Se não houver dados suficientes, anote como \"Não aplicável por falta de informação\".\n  - **Padronize colunas**: Se as colunas possuirem nomes não condizentes ou pouco descritivos, renomeie para algo mais objetivo e entendível de acordo com os dados (ex.: Compra -> PRODUTOS_COMPRADOS, ADMISSAO_ABRIL_ADMISSAO -> DATA_ADMISSAO). \n  - Reduza campos nulos de colunas deduzindo qual o valor mais provável de estar ali (ex.: SINDICATO x VALOR -> se o sindicato do colaborador for em SP, então o valor VR diário é consultado da tabela de referência de valores do sindicato.)\n\n**Regras Gerais**:\n- Trabalhe passo a passo: Primeiro, parseie o CSV. Em seguida, identifique colunas relevantes (ex.: liste-as em uma nota interna). Aplique exclusões. Depois, valide e corrija campo a campo.\n- Mantenha a integridade: Não adicione novas colunas ou linhas sem necessidade. Preserve colunas originais, exceto para correções inline.\n- Sem Invenções: Todas as decisões devem ser derivadas diretamente dos dados fornecidos. Se algo não puder ser corrigido sem suposições, mantenha o original e anote.\n- Considere os seguintes valores da tabela de referência para VR diário e seus estados, complete colunas nulas com esses valores de acordo com o estado ou sindicato:\n  - São Paulo: R$37,50\n  - Paraná: R$35,00\n  - Rio de Janeiro: R$35,00\n  - Rio Grande do Sul: R$35,00\n\n**Output Final**:\n- Forneça o CSV processado como uma string de texto completo, incluindo cabeçalhos, no formato padrão CSV (delimitado por ponto e vírgula).\n- Não inclua nada além disso no output."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        896,
        576
      ],
      "id": "f8e0a6be-e738-4d75-9aaf-949d46561685",
      "name": "Tratar e Validar Dados",
      "executeOnce": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=DADOS DO CSV: {{ $json.output }}",
        "options": {
          "systemMessage": "Você é um agente especializado em cálculos financeiros e processamento de dados. Sua tarefa é calcular o valor do Vale Refeição (VR) para cada colaborador com base em uma string de texto em formato CSV recebida, seguindo rigorosamente as regras de negócio fornecidas. Execute as etapas abaixo de forma objetiva e assertiva, validando os dados e retornando o resultado no formato JSON especificado.\n\n**Instruções**:\n1. **Leitura e Validação do CSV**:\n    - Leia e faça o \"parsing\" da string de texto CSV. Corrija possíveis erros de formatação do CSV para facilitar a leitura\n\n2. **Cálculo de Dias Úteis**:\n   - Para cada colaborador, calcule o número exato de dias úteis no mês, considerando:\n     - Dias úteis de cada sindicato\n     - Exclusão de períodos de férias (parcial ou integral, conforme regras do sindicato).\n     - Ajustes para datas de admissão/desligamento no meio do mês.\n     - Feriados estaduais e municipais aplicados corretamente.\n\n3. **Regras de Desligamento**:\n   - Para colaboradores desligados:\n   - Se o comunicado de desligamento foi registrado até o dia 15 do mês, **não** considerar para pagamento de VR.\n   - Se registrado após o dia 15, calcular o VR proporcional aos dias úteis trabalhados até a data de desligamento.\n   - Validar a elegibilidade do colaborador ao benefício com base na matrícula.\n\n4. **Cálculo do Valor do VR**:\n   - Para cada colaborador elegível, calcular o valor total do VR.\n   - Se o campo valor_vr_diario for nulo, considere os seguintes valores para VR diário de acordo com o estado, complete colunas nulas com esses valores utilizando o sindicato como referência:\n  - São Paulo: R$37,50\n  - Paraná: R$35,00\n  - Rio de Janeiro: R$35,00\n  - Rio Grande do Sul: R$35,00\n     - Multiplicar o número de dias úteis pelo valor diário do VR definido pelo sindicato ao qual o colaborador está vinculado.\n     - Aplicar a proporção de custo: 80% pago pela empresa e 20% descontado do colaborador.\n\n5. **Entrega do Resultado**:\n   - Gere um JSON contendo, para cada colaborador elegível (garanta que os dados utilizados são os originais):\n     - `matricula`: Identificador único do colaborador.\n     - `sindicato`: Nome ou código do sindicato.\n     - `dias_uteis_trabalhados`: Número de dias úteis calculados.\n     - `valor_vr_diario`: Valor diário do VR conforme o sindicato.\n     - `valor_vr_total`: Valor total do VR (dias_uteis * valor_vr_diario).\n     - `custo_empresa`: Valor pago pela empresa (80% do valor_vr_total).\n     - `desconto_colaborador`: Valor descontado do colaborador (20% do valor_vr_total).\n   - Garanta que todos os cálculos sejam precisos e que os dados sejam validados antes do processamento.\n\n**Saída**: \n* Sua saída deve conter apenas os dados do csv após o tratamento, não inclua explicações no corpo.\n* Não invente informações, se não receber os dados para análise retorne um JSON vazio: \"{}\".\n\n**Formato de Saída**:\n\n* Utilize o formato JSON.\n* Utilize os mesmos nomes de campos do exemplo.\n\n* Exemplo:\n[\n  {\n    matricula: 12345,\n    sindicato: SINDPPD RS,\n    dias_uteis_trabalhados: 20,\n    valor_vr_diario_reais: 35,00,\n    valor_vr_total_reais: 700,00,\n    custo_empresa_reais: 560,00,\n    desconto_colaborador_reais: 140,00\n  },\n  {\n    matricula: 12345,\n    sindicato: SINDPPD RS,\n    dias_uteis_trabalhados: 20,\n    valor_vr_diario_reais: 35,00,\n    valor_vr_total_reais: 700,00,\n    custo_empresa_reais: 560,00,\n    desconto_colaborador_reais: 140,00\n  }\n]",
          "maxIterations": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1200,
        576
      ],
      "id": "baab715c-f5a7-4366-a667-fbd78c131a72",
      "name": "Calcular VR"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f6a0b45-a424-46c1-afdd-6ab5aed112a3",
              "name": "dataList",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        800,
        336
      ],
      "id": "ffd98df9-ac9e-46a4-8934-ce520ec93513",
      "name": "Mapear Dados"
    },
    {
      "parameters": {
        "batchSize": 200,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        992,
        336
      ],
      "id": "58de5e8a-2c28-418f-8c00-55513f80d5a6",
      "name": "Iterar em Lotes"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1456,
        320
      ],
      "id": "30834ad0-fe5d-491f-a029-cea62a80904a",
      "name": "Criar Planilha"
    },
    {
      "parameters": {
        "content": "# Entrada de Dados\nEsse segmento é responsável por baixar o arquivo zipado com as planilhas, descompactar e consolidar em uma única base, através do backend em Python.",
        "height": 272,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        96,
        -32
      ],
      "id": "fed4ff2c-980e-4d39-a2a4-39b06df093a4",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1200,
        784
      ],
      "id": "8eea38bc-3333-4cfd-bcf0-eadd24ebaa6b",
      "name": "Gemini 2.5 Pro 2",
      "credentials": {
        "googlePalmApi": {
          "id": "vvG8vxpI60EEOOHy",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $input.all().map((data) => data.json.dataList).join('\\n')\n\nreturn { data }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        352
      ],
      "id": "273841f3-7639-4215-9f58-e7e33ffcda4b",
      "name": "Juntar Única String"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1856,
        320
      ],
      "id": "d4d8ba78-d377-421a-bb11-74d4b5944a37",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "respondWith": "binary",
        "responseDataSource": "set",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        432,
        704
      ],
      "id": "ed1a5139-d97a-490f-9068-ad21e6fa04c3",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "output.xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1648,
        320
      ],
      "id": "3955974b-4325-4149-a713-babc411ed2ae",
      "name": "Escrever Planilha Resultante"
    },
    {
      "parameters": {
        "fileSelector": "output.xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        224,
        704
      ],
      "id": "c6eb7074-1022-4221-982b-733b1a4945b1",
      "name": "Ler Planilha Resultante"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        896,
        784
      ],
      "id": "ce579236-f6b2-4987-bcca-00c3aab2be0d",
      "name": "Gemini 2.5 Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "vvG8vxpI60EEOOHy",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "path": "activate/status",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        16,
        704
      ],
      "id": "4e3a9703-5036-4fe4-a73d-2edfb1fa5bf6",
      "name": "Webhook File",
      "webhookId": "7581be77-a1de-4efe-bb00-d0837478561d"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "activate",
        "options": {
          "noResponseBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -64,
        336
      ],
      "id": "f7bba612-9c96-49f9-8072-80fe22e4b0e3",
      "name": "Webhook Activate",
      "webhookId": "7581be77-a1de-4efe-bb00-d0837478561d"
    },
    {
      "parameters": {
        "content": "# Agentes\n\n* Esse segmento é responsável por enviar os itens para os agentes\n* Cada agente irá tratar os dados conforme o que foi descrio no prompt.\n* Técnicas de engenharia de prompt foram aplicadas para restringir o agente a realizar a tarefa corretamente.\n* Após o cálculo final de VR, os dados são parseados para o formato JSON e retornados ao segmento de criação da planilha.",
        "height": 320,
        "width": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1824,
        576
      ],
      "id": "2f51c454-1aa0-44fc-bc77-d646bdc8d1fa",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "",
        "height": 208,
        "width": 1008,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        768,
        288
      ],
      "id": "d4488092-ea8e-4075-92ff-70d687499318",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "",
        "height": 240,
        "width": 784,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -96,
        656
      ],
      "id": "ebaa705e-eb33-4f17-a20f-5bac9c4a499e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Saída\n\n* A saída de dados recebe uma requisição por webhook para ler o arquivo resultante e retorná-lo ao usuário.",
        "height": 288,
        "width": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -576,
        640
      ],
      "id": "9e9aabca-cb74-4fe7-adea-76d5fb673ae9",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "jsCode": "try {\n  let data = $input.first().json.output.replaceAll(/json*/g, '').replaceAll('`', '');\n  \n  const parsed_json = JSON.parse(data);\n\n  if (Object.keys(parsed_json)) {\n    for (const key of parsed_json) {\n      console.log(key);\n    }\n    \n    return parsed_json;\n  }\n} catch (e) {\n  console.log(e)\n  return {}\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        576
      ],
      "id": "38a59298-fe89-4ed6-8772-754fc55e140d",
      "name": "JSON Parser"
    }
  ],
  "pinData": {},
  "connections": {
    "Requisitar Dados": {
      "main": [
        [
          {
            "node": "Extrair Cabeçalhos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extrair Cabeçalhos": {
      "main": [
        [
          {
            "node": "Dividir Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dividir Dados": {
      "main": [
        [
          {
            "node": "Mapear Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tratar e Validar Dados": {
      "main": [
        [
          {
            "node": "Calcular VR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular VR": {
      "main": [
        [
          {
            "node": "JSON Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapear Dados": {
      "main": [
        [
          {
            "node": "Iterar em Lotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Iterar em Lotes": {
      "main": [
        [
          {
            "node": "Criar Planilha",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Juntar Única String",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 2.5 Pro 2": {
      "ai_languageModel": [
        [
          {
            "node": "Calcular VR",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Criar Planilha": {
      "main": [
        [
          {
            "node": "Escrever Planilha Resultante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Juntar Única String": {
      "main": [
        [
          {
            "node": "Tratar e Validar Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escrever Planilha Resultante": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ler Planilha Resultante": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini 2.5 Pro": {
      "ai_languageModel": [
        [
          {
            "node": "Tratar e Validar Dados",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook File": {
      "main": [
        [
          {
            "node": "Ler Planilha Resultante",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Activate": {
      "main": [
        [
          {
            "node": "Requisitar Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Parser": {
      "main": [
        [
          {
            "node": "Iterar em Lotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": -1
  },
  "versionId": "fa8eb353-9312-462c-b3dc-d956826f363e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "231b4fcf052db07b90cec772d2e46c08568f8721ea038399e11d196703eb0290"
  },
  "id": "sBkLBjwwjaE8vj8T",
  "tags": []
}